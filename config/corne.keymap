#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        lhm: left_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <6 18 30 9 10 20 21 22 32 33 34 6 7 8 9 18 19 20 21 30 31 32 33 36 37 38 39 40 41 35 11 23 35 0 12 24>;
            hold-trigger-on-release;
        };

        rhm: right_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 11 23 35>;
            hold-trigger-on-release;
        };

        callum_mod: callum_mod {
            compatible = "zmk,behavior-sticky-key";
            label = "CALLUM_MOD";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <20000>;
            quick-release;
            ignore-modifiers;
        };

        td_layers_1: td_layers_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LAYERS_1";
            #binding-cells = <0>;
            bindings = <&mo 3>, <&mo 4>, <&mo 6>;

            tapping-term-ms = <1000>;
        };

        td_layers_2: td_layers_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LAYERS_2";
            #binding-cells = <0>;
            bindings = <&mo 3>, <&mo 5>, <&mo 6>;

            tapping-term-ms = <1000>;
        };

        special_q: special_q {
            compatible = "zmk,behavior-hold-tap";
            label = "SPECIAL_Q";
            bindings = <&qu>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        linger: linger {
            compatible = "zmk,behavior-hold-tap";
            label = "LINGER";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        rhm_adapt: rhm_adapt {
            compatible = "zmk,behavior-hold-tap";
            label = "RHM_ADAPT";
            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&adaptive_key>;

            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 11 23 35>;
            hold-trigger-on-release;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        combo_hd_q {
            bindings = <&special_q Q Q>;
            key-positions = <2 3>;
            layers = <0 7 8 9 10 11>;
            timeout-ms = <100>;
        };

        combo_hd_z {
            bindings = <&kp Z>;
            key-positions = <1 2>;
            layers = <0 7 8 9 10 11>;
            timeout-ms = <100>;
        };

        combo_esc {
            bindings = <&kp ESC>;
            key-positions = <1 13>;
            timeout-ms = <100>;
        };

        combo_return {
            bindings = <&kp RETURN>;
            key-positions = <16 3>;
            timeout-ms = <100>;
        };

        combo_delete {
            bindings = <&kp DELETE>;
            key-positions = <17 4>;
            timeout-ms = <150>;
        };

        combo_return_right {
            bindings = <&kp RETURN>;
            key-positions = <19 8>;
            timeout-ms = <100>;
        };
    };

    macros {
        adaptive_key: adaptive_key {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&macro_param_2to1 &sl MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;

            label = "ADAPTIVE_KEY";
        };

        adapt_p_v: adapt_p_v {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE &kp L &kp V>;
            label = "ADAPT_P_V";
        };

        qu: qu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Q &kp U>;
            label = "QU";
        };

        com: com {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp O &kp M>;
            label = "COM";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        hd_gold {
            bindings = <
&none  &kp J            &adaptive_key G 8  &adaptive_key M 10   &adaptive_key P 8  &kp V           &kp SEMI      &adaptive_key PERIOD 11   &kp FSLH              &kp BACKSLASH     &linger GRAVE SQT  &none
&none  &lhm LEFT_GUI R  &lhm LEFT_ALT S    &lhm LEFT_CONTROL N  &lhm LEFT_SHIFT D  &kp W           &kp COMMA     &rhm_adapt RIGHT_SHIFT A  &rhm RIGHT_CONTROL E  &rhm RIGHT_ALT I  &rhm RIGHT_GUI H   &none
&none  &kp X            &kp F              &kp L                &kp C              &kp B           &kp MINUS     &kp U                     &kp O                 &kp Y             &kp K              &none
                                           &lt 1 TAB            &lt 2 SPACE        &td_layers_2    &td_layers_1  &lt 2 T                   &kp BACKSPACE
            >;
        };

        button {
            bindings = <
&none  &kp Z                 &kp X                 &kp C                     &kp V                   &kp A     &kp A   &kp V                    &kp C                      &kp X                  &kp Z                  &none
&none  &callum_mod LEFT_GUI  &callum_mod LEFT_ALT  &callum_mod LEFT_CONTROL  &callum_mod LEFT_SHIFT  &none     &none   &callum_mod RIGHT_SHIFT  &callum_mod RIGHT_CONTROL  &callum_mod RIGHT_ALT  &callum_mod RIGHT_GUI  &none
&none  &kp Z                 &kp X                 &kp C                     &kp V                   &kp A     &kp A   &kp V                    &kp C                      &kp X                  &kp Z                  &none
                                                   &trans                    &trans                  &trans    &trans  &trans                   &trans
            >;
        };

        num_sym {
            bindings = <
&none  &kp N1        &kp N2         &kp N3            &kp N4          &kp N5                                &kp N6                                      &kp N7               &kp N8                 &kp N9             &kp N0                 &none
&none  &kp LEFT_GUI  &kp LEFT_ALT   &kp LEFT_CONTROL  &kp LEFT_SHIFT  &linger RIGHT_BRACKET LEFT_BRACKET    &linger RIGHT_PARENTHESIS LEFT_PARENTHESIS  &rhm RIGHT_SHIFT N4  &rhm RIGHT_CONTROL N5  &rhm RIGHT_ALT N6  &rhm RIGHT_GUI PERIOD  &none
&none  &kp GRAVE     &kp SEMICOLON  &kp MINUS         &kp EQUAL       &none                                 &kp SLASH                                   &kp N1               &kp N2                 &kp N3             &kp N0                 &none
                                    &trans            &trans          &trans                                &trans                                      &trans               &trans
            >;
        };

        nav {
            bindings = <
&none  &none         &kp HOME            &kp UP                  &kp END                &kp PG_UP    &kp HOME  &kp PG_DN              &kp PG_UP              &kp END               &kp ESC        &none
&none  &kp LEFT_GUI  &lhm LEFT_ALT LEFT  &lhm LEFT_CONTROL DOWN  &lhm LEFT_SHIFT RIGHT  &kp PG_DN    &kp LEFT  &rhm RIGHT_SHIFT DOWN  &rhm RIGHT_CONTROL UP  &rhm RIGHT_ALT RIGHT  &kp RIGHT_GUI  &none
&none  &none         &none               &none                   &none                  &none        &none     &none                  &none                  &none                 &none          &none
                                         &trans                  &trans                 &trans       &trans    &trans                 &trans
            >;
        };

        media {
            bindings = <
&none  &none             &none       &kp C_VOLUME_UP    &none       &none     &none       &kp C_BRI_DN       &kp C_BRI_UP     &none       &none             &none
&none  &kp C_PLAY_PAUSE  &kp C_PREV  &kp C_VOLUME_DOWN  &kp C_NEXT  &none     &kp C_PREV  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT  &kp C_PLAY_PAUSE  &none
&none  &none             &none       &none              &none       &none     &none       &none              &none            &none       &none             &none
                                     &trans             &trans      &trans    &trans      &trans             &trans
            >;
        };

        function {
            bindings = <
&none  &none         &none         &none             &none           &none     &none            &kp F7  &kp F8  &kp F9  &kp F10  &none
&none  &kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &none     &caps_word       &kp F4  &kp F5  &kp F6  &kp F11  &none
&none  &none         &none         &none             &none           &none     &kp PRINTSCREEN  &kp F1  &kp F2  &kp F3  &kp F12  &none
                                   &trans            &trans          &trans    &trans           &trans  &trans
            >;
        };

        settings {
            bindings = <
&none  &bt BT_CLR    &none         &none         &out OUT_TOG  &bootloader     &bootloader  &none   &none   &none  &none  &none
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none        &none   &none   &none  &none  &none
&none  &kp X         &kp X         &kp X         &kp X         &none           &none        &none   &none   &none  &none  &none
                                   &trans        &trans        &trans          &trans       &trans  &trans
            >;
        };

        hd_g_adapt_p {
            bindings = <
&trans  &trans  &trans  &kp L   &trans  &adapt_p_v    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans        &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans        &trans  &trans  &trans
            >;
        };

        hd_g_adapt_g {
            bindings = <
&trans  &trans  &trans  &kp L   &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        hd_g_adapt_a {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &kp U   &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        hd_g_adapt_m {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &kp B     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        hd_g_adapt_period {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &com    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
